{"ast":null,"code":"var _jsxFileName = \"/Users/ventura/Desktop/EPFL/AI_Team/mist/mnistdeploytest/website/mnist-web/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport * as ort from 'onnxruntime-web';\nimport { Box, Button, Typography, Paper } from '@mui/material';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [predictions, setPredictions] = useState([]);\n  const [session, setSession] = useState(null);\n  useEffect(() => {\n    const loadModel = async () => {\n      try {\n        const session = await ort.InferenceSession.create('/model.onnx');\n        setSession(session);\n      } catch (e) {\n        console.error('Failed to load model:', e);\n        throw e;\n      }\n    };\n    loadModel();\n  }, []);\n  const startDrawing = e => {\n    setIsDrawing(true);\n    const canvas = canvasRef.current;\n    const ctx = canvas === null || canvas === void 0 ? void 0 : canvas.getContext('2d');\n    if (ctx && canvas) {\n      ctx.beginPath();\n      ctx.moveTo(e.clientX - canvas.offsetLeft, e.clientY - canvas.offsetTop);\n    }\n  };\n  const draw = e => {\n    if (!isDrawing) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas === null || canvas === void 0 ? void 0 : canvas.getContext('2d');\n    if (ctx && canvas) {\n      ctx.lineWidth = 13;\n      ctx.lineCap = 'round';\n      ctx.lineTo(e.clientX - canvas.offsetLeft, e.clientY - canvas.offsetTop);\n      ctx.stroke();\n    }\n  };\n  const stopDrawing = () => {\n    setIsDrawing(false);\n  };\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas === null || canvas === void 0 ? void 0 : canvas.getContext('2d');\n    if (ctx && canvas) {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      setPredictions([]);\n    }\n  };\n  const preprocessCanvas = canvas => {\n    // Create a temporary canvas for resizing\n    const tempCanvas = document.createElement('canvas');\n    tempCanvas.width = 28;\n    tempCanvas.height = 28;\n    const tempCtx = tempCanvas.getContext('2d');\n    if (!tempCtx) throw new Error('Could not get canvas context');\n\n    // Draw the original canvas content onto the smaller canvas\n    tempCtx.fillStyle = 'white';\n    tempCtx.fillRect(0, 0, 28, 28);\n    tempCtx.drawImage(canvas, 0, 0, canvas.width, canvas.height, 0, 0, 28, 28);\n\n    // Get image data and normalize\n    const imageData = tempCtx.getImageData(0, 0, 28, 28);\n    const data = new Float32Array(28 * 28);\n\n    // Convert to grayscale and normalize to [-1, 1]\n    for (let i = 0; i < imageData.data.length; i += 4) {\n      const grayscale = (imageData.data[i] + imageData.data[i + 1] + imageData.data[i + 2]) / 3;\n      data[i / 4] = (255 - grayscale) / 255 * 2 - 1; // Invert and normalize\n    }\n    return data;\n  };\n  const predict = async () => {\n    if (!session || !canvasRef.current) return;\n    try {\n      // Preprocess the canvas image\n      const data = preprocessCanvas(canvasRef.current);\n\n      // Create tensor with correct shape [1, 1, 28, 28]\n      const inputTensor = new ort.Tensor('float32', data, [1, 1, 28, 28]);\n\n      // Run inference\n      const outputs = await session.run({\n        input: inputTensor\n      });\n\n      // Get the output data\n      const outputData = outputs.output.data;\n\n      // Convert to probabilities using softmax\n      const softmaxOutput = softmax(Array.from(outputData));\n\n      // Create predictions array\n      const predictions = softmaxOutput.map((prob, index) => ({\n        digit: index,\n        probability: prob\n      })).sort((a, b) => b.probability - a.probability);\n      setPredictions(predictions);\n    } catch (error) {\n      console.error('Prediction error:', error);\n    }\n  };\n  const saveImageToGitHub = async (imageDataUrl, fileName) => {\n    const token = process.env.REACT_APP_GITHUB_TOKEN;\n    const repo = 'justadude12/mnistdeploytest';\n    const path = `website/mnist-web/public/newimages/${fileName}.png`;\n    const content = imageDataUrl.split(',')[1];\n    try {\n      const response = await axios.put(`https://api.github.com/repos/${repo}/contents/${path}`, {\n        message: `Add image ${fileName}`,\n        content: content\n      }, {\n        headers: {\n          Authorization: `token ${token}`,\n          Accept: 'application/vnd.github.v3+json'\n        }\n      });\n      console.log('Image saved to GitHub:', response.data.content.html_url);\n    } catch (error) {\n      console.error('Error saving image to GitHub:', error);\n    }\n  };\n  const saveImage = async () => {\n    if (!canvasRef.current) return;\n    try {\n      const dataUrl = canvasRef.current.toDataURL('image/png');\n      const timestamp = Date.now();\n      const fileName = `digit_9_${timestamp}.png`;\n      await saveImageToGitHub(dataUrl, fileName);\n    } catch (error) {\n      console.error('Error saving image:', error);\n    }\n  };\n\n  // Helper function for softmax\n  const softmax = arr => {\n    const max = Math.max(...arr);\n    const exp = arr.map(x => Math.exp(x - max));\n    const sum = exp.reduce((a, b) => a + b);\n    return exp.map(x => x / sum);\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 3,\n      maxWidth: 800,\n      mx: 'auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"MNIST Digit Classifier\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      sx: {\n        p: 2,\n        mb: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        width: 400,\n        height: 400,\n        style: {\n          border: '1px solid black'\n        },\n        onMouseDown: startDrawing,\n        onMouseMove: draw,\n        onMouseUp: stopDrawing,\n        onMouseOut: stopDrawing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: predict,\n          sx: {\n            mr: 1\n          },\n          children: \"Predict\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          onClick: clearCanvas,\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: saveImage,\n          sx: {\n            mr: 1\n          },\n          color: \"secondary\",\n          children: \"Save as 9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), predictions.length > 0 && /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      sx: {\n        p: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: \"Predictions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }, this), predictions.slice(0, 3).map(({\n        digit,\n        probability\n      }) => /*#__PURE__*/_jsxDEV(Typography, {\n        children: [\"Digit \", digit, \": \", (probability * 100).toFixed(2), \"%\"]\n      }, digit, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Bim5TIn0S2JmAoqb5wi8H8xq7g8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useRef","useState","useEffect","ort","Box","Button","Typography","Paper","axios","jsxDEV","_jsxDEV","App","_s","canvasRef","isDrawing","setIsDrawing","predictions","setPredictions","session","setSession","loadModel","InferenceSession","create","e","console","error","startDrawing","canvas","current","ctx","getContext","beginPath","moveTo","clientX","offsetLeft","clientY","offsetTop","draw","lineWidth","lineCap","lineTo","stroke","stopDrawing","clearCanvas","clearRect","width","height","preprocessCanvas","tempCanvas","document","createElement","tempCtx","Error","fillStyle","fillRect","drawImage","imageData","getImageData","data","Float32Array","i","length","grayscale","predict","inputTensor","Tensor","outputs","run","input","outputData","output","softmaxOutput","softmax","Array","from","map","prob","index","digit","probability","sort","a","b","saveImageToGitHub","imageDataUrl","fileName","token","process","env","REACT_APP_GITHUB_TOKEN","repo","path","content","split","response","put","message","headers","Authorization","Accept","log","html_url","saveImage","dataUrl","toDataURL","timestamp","Date","now","arr","max","Math","exp","x","sum","reduce","sx","p","maxWidth","mx","children","variant","gutterBottom","_jsxFileName","lineNumber","columnNumber","elevation","mb","ref","style","border","onMouseDown","onMouseMove","onMouseUp","onMouseOut","mt","onClick","mr","color","slice","toFixed","_c","$RefreshReg$"],"sources":["/Users/ventura/Desktop/EPFL/AI_Team/mist/mnistdeploytest/website/mnist-web/src/App.tsx"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport * as ort from 'onnxruntime-web';\nimport { Box, Button, Typography, Paper } from '@mui/material';\nimport axios from 'axios';\n\ninterface Prediction {\n  digit: number;\n  probability: number;\n}\n\nconst App: React.FC = () => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [predictions, setPredictions] = useState<Prediction[]>([]);\n  const [session, setSession] = useState<ort.InferenceSession | null>(null);\n\n  useEffect(() => {\n    const loadModel = async () => {\n      try {\n        const session = await ort.InferenceSession.create('/model.onnx');\n        setSession(session);\n      } catch (e) {\n        console.error('Failed to load model:', e);\n        throw e;\n      }\n    };\n    loadModel();\n  }, []);\n\n  const startDrawing = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    setIsDrawing(true);\n    const canvas = canvasRef.current;\n    const ctx = canvas?.getContext('2d');\n    if (ctx && canvas) {\n      ctx.beginPath();\n      ctx.moveTo(\n        e.clientX - canvas.offsetLeft,\n        e.clientY - canvas.offsetTop\n      );\n    }\n  };\n\n  const draw = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    if (!isDrawing) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas?.getContext('2d');\n    if (ctx && canvas) {\n      ctx.lineWidth = 13;\n      ctx.lineCap = 'round';\n      ctx.lineTo(\n        e.clientX - canvas.offsetLeft,\n        e.clientY - canvas.offsetTop\n      );\n      ctx.stroke();\n    }\n  };\n\n  const stopDrawing = () => {\n    setIsDrawing(false);\n  };\n\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas?.getContext('2d');\n    if (ctx && canvas) {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      setPredictions([]);\n    }\n  };\n\n  const preprocessCanvas = (canvas: HTMLCanvasElement): Float32Array => {\n    // Create a temporary canvas for resizing\n    const tempCanvas = document.createElement('canvas');\n    tempCanvas.width = 28;\n    tempCanvas.height = 28;\n    const tempCtx = tempCanvas.getContext('2d');\n    \n    if (!tempCtx) throw new Error('Could not get canvas context');\n    \n    // Draw the original canvas content onto the smaller canvas\n    tempCtx.fillStyle = 'white';\n    tempCtx.fillRect(0, 0, 28, 28);\n    tempCtx.drawImage(canvas, 0, 0, canvas.width, canvas.height, 0, 0, 28, 28);\n    \n    // Get image data and normalize\n    const imageData = tempCtx.getImageData(0, 0, 28, 28);\n    const data = new Float32Array(28 * 28);\n    \n    // Convert to grayscale and normalize to [-1, 1]\n    for (let i = 0; i < imageData.data.length; i += 4) {\n      const grayscale = (imageData.data[i] + imageData.data[i + 1] + imageData.data[i + 2]) / 3;\n      data[i / 4] = (255 - grayscale) / 255 * 2 - 1; // Invert and normalize\n    }\n    \n    return data;\n  };\n\n  const predict = async () => {\n    if (!session || !canvasRef.current) return;\n    \n    try {\n      // Preprocess the canvas image\n      const data = preprocessCanvas(canvasRef.current);\n      \n      // Create tensor with correct shape [1, 1, 28, 28]\n      const inputTensor = new ort.Tensor('float32', data, [1, 1, 28, 28]);\n      \n      // Run inference\n      const outputs = await session.run({\n        input: inputTensor\n      });\n      \n      // Get the output data\n      const outputData = outputs.output.data as Float32Array;\n      \n      // Convert to probabilities using softmax\n      const softmaxOutput = softmax(Array.from(outputData));\n      \n      // Create predictions array\n      const predictions = softmaxOutput.map((prob, index) => ({\n        digit: index,\n        probability: prob\n      })).sort((a, b) => b.probability - a.probability);\n      \n      setPredictions(predictions);\n    } catch (error) {\n      console.error('Prediction error:', error);\n    }\n  };\n\n  const saveImageToGitHub = async (imageDataUrl: string, fileName: string) => {\n    const token = process.env.REACT_APP_GITHUB_TOKEN;\n    const repo = 'justadude12/mnistdeploytest';\n    const path = `website/mnist-web/public/newimages/${fileName}.png`;\n    const content = imageDataUrl.split(',')[1];\n\n    try {\n      const response = await axios.put(\n        `https://api.github.com/repos/${repo}/contents/${path}`,\n        {\n          message: `Add image ${fileName}`,\n          content: content,\n        },\n        { headers: { Authorization: `token ${token}`,\n          Accept: 'application/vnd.github.v3+json',\n         },\n        }\n      );\n      console.log('Image saved to GitHub:', response.data.content.html_url);\n    } catch (error) {\n      console.error('Error saving image to GitHub:', error);\n    }\n  };\n\n  const saveImage = async () => {\n    if (!canvasRef.current) return;\n  \n    try {\n      const dataUrl = canvasRef.current.toDataURL('image/png');\n      const timestamp = Date.now();\n      const fileName = `digit_9_${timestamp}.png`;\n  \n      await saveImageToGitHub(dataUrl, fileName);\n    } catch (error) {\n      console.error('Error saving image:', error);\n    }\n  };\n\n  // Helper function for softmax\n  const softmax = (arr: number[]): number[] => {\n    const max = Math.max(...arr);\n    const exp = arr.map(x => Math.exp(x - max));\n    const sum = exp.reduce((a, b) => a + b);\n    return exp.map(x => x / sum);\n  };\n\n  return (\n    <Box sx={{ p: 3, maxWidth: 800, mx: 'auto' }}>\n      <Typography variant=\"h4\" gutterBottom>\n        MNIST Digit Classifier\n      </Typography>\n      \n      <Paper elevation={3} sx={{ p: 2, mb: 2 }}>\n        <canvas\n          ref={canvasRef}\n          width={400}\n          height={400}\n          style={{ border: '1px solid black' }}\n          onMouseDown={startDrawing}\n          onMouseMove={draw}\n          onMouseUp={stopDrawing}\n          onMouseOut={stopDrawing}\n        />\n        \n        <Box sx={{ mt: 2 }}>\n          <Button variant=\"contained\" onClick={predict} sx={{ mr: 1 }}>\n            Predict\n          </Button>\n          <Button variant=\"outlined\" onClick={clearCanvas}>\n            Clear\n          </Button>\n          <Button\n            variant=\"contained\"\n            onClick={saveImage}\n            sx = {{mr : 1}}\n            color=\"secondary\">\n            Save as 9\n          </Button>\n        </Box>\n      </Paper>\n\n      {predictions.length > 0 && (\n        <Paper elevation={3} sx={{ p: 2 }}>\n          <Typography variant=\"h6\" gutterBottom>\n            Predictions\n          </Typography>\n          {predictions.slice(0, 3).map(({ digit, probability }) => (\n            <Typography key={digit}>\n              Digit {digit}: {(probability * 100).toFixed(2)}%\n            </Typography>\n          ))}\n        </Paper>\n      )}\n    </Box>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}